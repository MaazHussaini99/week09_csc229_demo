package com.mycompany.week09_csc229_demo;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author MoaathAlrajab
 */
public class Homework09 {
    
    // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over one hundred divisors?
    
    */
    
    

    
    static int triangleNums(int num){
        int returnNum = 0;
        
        
        for (int i = 1; i < ((int) Math.sqrt(num)); i++) {
             if (num % i ==0) {
                 returnNum +=2;
            }
        }
        
        int sqrtNum = (int) Math.sqrt(num);
        if (sqrtNum * sqrtNum == num) {
            returnNum--;
        }
        
        return returnNum;
    }
    
    
    public static void main(String[] args) {
        
        int num = 0;
        
        int i = 1;
 
        while (triangleNums(num) < 100) {
            num += i;
            i++;
        }
        
        System.out.println("The first Triangular number with 100 divisors is: " + num);
    }
    
    //    static int findDivisors(int n)
//	    {
//                int count = 0;
//	        for (int i=1;i<=n;i++)
//	            if (n%i==0)
//	                count++;
//                
//                return count;
//	    }
//    
//    
//    static int tringularNums(){
//        int num = 0;
//        for (int i = 0; i < 10000; i++) {
//            
//            if(findDivisors(i) == 100) {
//                num = (i*(i+1))/2;
//                return num;
//            }
//            
//        }
//        
//        return -1;
//    }
    
}